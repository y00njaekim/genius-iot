# hardware_controller.py

import time
import numpy as np
import os


class BaseController:
    """
    Î™®Îì† ÌïòÎìúÏõ®Ïñ¥ Ïª®Ìä∏Î°§Îü¨Ïùò Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º Ï†ïÏùòÌïòÎäî Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§ÏûÖÎãàÎã§.
    Ïù¥Î•º ÌÜµÌï¥ Î™©(Mock) Ïª®Ìä∏Î°§Îü¨ÏôÄ Ïã§Ï†ú Ïª®Ìä∏Î°§Îü¨Í∞Ä ÎèôÏùºÌïú Î©îÏÑúÎìúÎ•º Í∞ñÎèÑÎ°ù Î≥¥Ïû•Ìï©ÎãàÎã§.
    """

    def setup(self):
        raise NotImplementedError

    def set_room_light(self, state):
        raise NotImplementedError

    def set_dimmable_light(self, brightness):
        raise NotImplementedError

    def set_mood_lamp_color(self, r, g, b):
        raise NotImplementedError

    def read_doorbell(self):
        raise NotImplementedError

    def get_distance(self):
        raise NotImplementedError

    def capture_image(self, output_path):
        raise NotImplementedError

    def cleanup(self):
        raise NotImplementedError


class MockController(BaseController):
    """
    ÌïòÎìúÏõ®Ïñ¥ Íµ¨ÏÑ± ÏöîÏÜåÎ•º ÏãúÎÆ¨Î†àÏù¥ÏÖòÌïòÎäî Î™©(Mock) ÌïòÎìúÏõ®Ïñ¥ Ïª®Ìä∏Î°§Îü¨ÏûÖÎãàÎã§.
    Ïã§Ï†ú ÌïòÎìúÏõ®Ïñ¥ ÏóÜÏù¥ Î™®Îì† Ïª¥Ìì®ÌÑ∞ÏóêÏÑú Ïã§ÌñâÎê©ÎãàÎã§.
    Í∞úÎ∞ú Î∞è ÌÖåÏä§Ìä∏Ïóê Ï†ÅÌï©Ìï©ÎãàÎã§.
    """

    def __init__(self):
        self._room_light_state = False
        self._dimmable_light_brightness = 100
        self._mood_lamp_color = (255, 255, 255)
        self._doorbell_pressed = False
        print("‚úÖ Mock hardware controller initialized.")

    def setup(self):
        print("üîß Mock setup: No action needed as hardware is simulated.")
        pass

    def set_room_light(self, state):
        self._room_light_state = state
        status = "ON" if state else "OFF"
        print(f"üí° Mock Room Light -> {status}")

    def set_dimmable_light(self, brightness):
        self._dimmable_light_brightness = brightness
        print(f"üí° Mock Dimmable Light -> Brightness {brightness}%")

    def set_mood_lamp_color(self, r, g, b):
        self._mood_lamp_color = (r, g, b)
        print(f"üé® Mock Mood Lamp -> Color ({r}, {g}, {b})")

    def read_doorbell(self):
        # In a real scenario, this would read a pin. We simulate it here.
        # A button in the web UI can toggle this state.
        return self._doorbell_pressed

    def get_distance(self):
        # Simulate the distance sensor with some noise
        base_distance = 80
        noise = np.random.uniform(-1.5, 1.5)
        return round(base_distance + noise, 1)

    def capture_image(self, output_path):
        # Return a placeholder image path.
        placeholder_path = os.path.join("assets", "placeholder.jpg")
        if os.path.exists(placeholder_path):
            # In a real app, this should copy the file to output_path
            print(f"üì∏ Mock Camera -> Using placeholder at {placeholder_path}")
            return placeholder_path
        else:
            print("Error: Placeholder image not found at assets/placeholder.jpg.")
            return None

    def cleanup(self):
        print("üßπ Mock cleanup: No action needed.")
        pass


class RaspberryPiController(BaseController):
    """
    ÎùºÏ¶àÎ≤†Î¶¨ÌååÏù¥Î•º ÏúÑÌïú Ïã§Ï†ú ÌïòÎìúÏõ®Ïñ¥ Ïª®Ìä∏Î°§Îü¨ÏûÖÎãàÎã§.
    RPi.GPIOÏôÄ picamera2Î•º ÏÇ¨Ïö©ÌïòÏó¨ Ïã§Ï†ú ÌïòÎìúÏõ®Ïñ¥Î•º Ï†úÏñ¥Ìï©ÎãàÎã§.

    Ï∞∏Í≥†: Ïù¥ ÏΩîÎìúÎäî Ï†úÍ≥µÎêú ÎßàÌÅ¨Îã§Ïö¥ Î¨∏ÏÑúÎ•º Í∏∞Î∞òÏúºÎ°ú ÌïòÎ©∞,
    Îã§ÏùåÍ≥º Í∞ôÏùÄ ÌïÄ Ïó∞Í≤∞ÏùÑ Í∞ÄÏ†ïÌï©ÎãàÎã§:
    - Í±∞Ïã§ Ï°∞Î™Ö (LED): GPIO 12 (Î¨ºÎ¶¨Ï†Å ÌïÄ 32)
    - Î∞ùÍ∏∞ Ï°∞Ï†à Ï°∞Î™Ö (PWM LED): ÏòàÏ†úÎ•º ÏúÑÌï¥ GPIO 12 Í≥µÏú†
    - RGB LED: Red=GPIO 18, Green=GPIO 23, Blue=GPIO 24
    - Ï¥àÏù∏Ï¢Ö (Push Button): GPIO 25
    - Ï¥àÏùåÌåå ÏÑºÏÑú: Trig=GPIO 22, Echo=GPIO 27
    """

    def __init__(self):
        # --- ÎùºÏ¶àÎ≤†Î¶¨ÌååÏù¥ Ï†ÑÏö© ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏûÑÌè¨Ìä∏ ---
        # Ïù¥ Ïª®Ìä∏Î°§Îü¨Îäî ÎùºÏ¶àÎ≤†Î¶¨ÌååÏù¥ÏóêÏÑúÎßå Ïù∏Ïä§ÌÑ¥Ïä§ÌôîÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
        try:
            import RPi.GPIO as GPIO
            from picamera2 import Picamera2
        except (ImportError, RuntimeError) as e:
            print(f"Error: Could not import Raspberry Pi libraries. {e}")
            print("Please ensure this program is running on a Raspberry Pi and not in Mock mode.")
            raise

        self.GPIO = GPIO
        self.Picamera2 = Picamera2
        # -----------------------------------------

        # Ï†úÍ≥µÎêú Î¨∏ÏÑú Í∏∞Î∞ò GPIO ÌïÄ Îß§Ìïë (BCM Î™®Îìú Í∏∞Ï§Ä)
        self.LED_PIN = 12  # Í±∞Ïã§ Ï°∞Î™Ö (Î¨ºÎ¶¨Ï†Å ÌïÄ 32)
        self.BTN_PIN = 25  # Ï¥àÏù∏Ï¢Ö Î≤ÑÌäº (Î¨ºÎ¶¨Ï†Å ÌïÄ 22)
        self.TRIG_PIN = 22  # Ï¥àÏùåÌåå Trig (Î¨ºÎ¶¨Ï†Å ÌïÄ 15)
        self.ECHO_PIN = 27  # Ï¥àÏùåÌåå Echo (Î¨ºÎ¶¨Ï†Å ÌïÄ 13)

        self.R_PIN = 18  # RGB Red (Î¨ºÎ¶¨Ï†Å ÌïÄ 12)
        self.G_PIN = 23  # RGB Green (Î¨ºÎ¶¨Ï†Å ÌïÄ 16)
        self.B_PIN = 24  # RGB Blue (Î¨ºÎ¶¨Ï†Å ÌïÄ 18)

        self.pwm_led = None
        self.pwm_r = None
        self.pwm_g = None
        self.pwm_b = None

        self.picam2 = None
        print("‚úÖ Raspberry Pi hardware controller initialized.")

    def setup(self):
        print("üîß Raspberry Pi Setup: Configuring GPIO pins...")
        self.GPIO.setmode(self.GPIO.BCM)
        self.GPIO.setwarnings(False)

        # Í±∞Ïã§ Ï°∞Î™Ö & Î∞ùÍ∏∞ Ï°∞Ï†à Ï°∞Î™Ö (ÌïÄ Í≥µÏú†)
        self.GPIO.setup(self.LED_PIN, self.GPIO.OUT)
        self.pwm_led = self.GPIO.PWM(self.LED_PIN, 500)  # 500 Hz Ï£ºÌååÏàò
        self.pwm_led.start(0)  # Í∫ºÏßÑ ÏÉÅÌÉúÏóêÏÑú ÏãúÏûë

        # RGB Î¨¥Îìú Îû®ÌîÑ
        self.GPIO.setup([self.R_PIN, self.G_PIN, self.B_PIN], self.GPIO.OUT)
        self.pwm_r = self.GPIO.PWM(self.R_PIN, 100)
        self.pwm_g = self.GPIO.PWM(self.G_PIN, 100)
        self.pwm_b = self.GPIO.PWM(self.B_PIN, 100)
        self.pwm_r.start(0)
        self.pwm_g.start(0)
        self.pwm_b.start(0)

        # Ï¥àÏù∏Ï¢Ö Î≤ÑÌäº
        self.GPIO.setup(self.BTN_PIN, self.GPIO.IN, pull_up_down=self.GPIO.PUD_UP)

        # Ï¥àÏùåÌåå ÏÑºÏÑú
        self.GPIO.setup(self.TRIG_PIN, self.GPIO.OUT)
        self.GPIO.setup(self.ECHO_PIN, self.GPIO.IN)

        # ÌååÏù¥ Ïπ¥Î©îÎùº
        try:
            print("üì∑ Attempting to initialize camera...")
            self.picam2 = self.Picamera2()
            config = self.picam2.create_still_configuration()
            self.picam2.configure(config)
            self.picam2.start()
            time.sleep(1)  # Allow camera to warm up
            if self.picam2.started:
                print("‚úÖ Camera started successfully.")
            else:
                print("‚ö†Ô∏è Camera failed to start, but no exception was raised. The button might not be displayed in the UI.")
                self.picam2 = None  # Explicitly set to None for UI checks
        except Exception as e:
            print(f"‚ùå Critical error during camera setup: {e}")
            print("    Please ensure the camera is connected and enabled correctly.")
            self.picam2 = None  # Explicitly set to None for UI checks

        print("‚úÖ GPIO setup complete.")

    def set_room_light(self, state):
        # Set duty cycle to 100% or 0% for simple on/off
        brightness = 100 if state else 0
        self.pwm_led.ChangeDutyCycle(brightness)
        status = "ON" if state else "OFF"
        print(f"üí° Room Light -> {status}")

    def set_dimmable_light(self, brightness):
        self.pwm_led.ChangeDutyCycle(brightness)
        print(f"üí° Dimmable Light -> Brightness {brightness}%")

    def set_mood_lamp_color(self, r, g, b):
        # Convert 0-255 color values to 0-100 duty cycle
        self.pwm_r.ChangeDutyCycle(r / 255.0 * 100)
        self.pwm_g.ChangeDutyCycle(g / 255.0 * 100)
        self.pwm_b.ChangeDutyCycle(b / 255.0 * 100)
        print(f"üé® Mood Lamp -> Color ({r}, {g}, {b})")

    def read_doorbell(self):
        # Button press pulls the GPIO pin to LOW due to PUD_UP
        return self.GPIO.input(self.BTN_PIN) == self.GPIO.LOW

    def get_distance(self):
        self.GPIO.output(self.TRIG_PIN, False)
        time.sleep(0.5)

        self.GPIO.output(self.TRIG_PIN, True)
        time.sleep(0.00001)
        self.GPIO.output(self.TRIG_PIN, False)

        while self.GPIO.input(self.ECHO_PIN) == 0:
            pulse_start = time.time()

        while self.GPIO.input(self.ECHO_PIN) == 1:
            pulse_end = time.time()

        pulse_duration = pulse_end - pulse_start
        distance = pulse_duration * 17150  # Speed of sound (34300 cm/s) / 2
        return round(distance, 2)

    def capture_image(self, output_path):
        try:
            self.picam2.capture_file(output_path)
            print(f"üì∏ Camera -> Image saved to {output_path}")
            return output_path
        except Exception as e:
            print(f"‚ùå Camera Error: Failed to capture image. Error: {e}")
            return None

    def cleanup(self):
        print("üßπ Cleaning up GPIO pins...")
        self.pwm_led.stop()
        self.pwm_r.stop()
        self.pwm_g.stop()
        self.pwm_b.stop()
        self.GPIO.cleanup()
        self.picam2.stop()
        print("‚úÖ Cleanup complete.")
